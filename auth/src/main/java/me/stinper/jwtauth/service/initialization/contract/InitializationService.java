package me.stinper.jwtauth.service.initialization.contract;

import org.springframework.lang.Nullable;

/**
 * Интерфейс служит для инициализации (создания) какой-либо сущности при запуске приложения
 * @param <T> тип инициализируемой сущности
 */
public interface InitializationService<T> {

    /**
     * Проводит инициализацию сущности
     * @return если сущность была инициализирована, возвращает ее экземпляр. Иначе - возвращает NULL
     */
    @Nullable
    T initialize();

    /**
     * Определяет, нужно ли инициализировать сущность. Метод опирается на <b>стратегию инициализации</b>,
     * которую возвращает {@link #getInitializationMode()}
     * @see InitializationMode
     * @return true - инициализация НЕ требуется, она уже проведена, false - требуется инициализация
     */
    boolean isAlreadyInitialized();

    default InitializationMode getInitializationMode() {
        return InitializationMode.ON_TABLE_EMPTY;
    }

    /**
     * Определяет стратегию инициализации конкретной сущности
     */
    enum InitializationMode {
        /**
         * Инициализация будет производиться каждый раз при перезапуске приложения.
         * Это означает, что сервис должен проверять наличие сущности с конкретными параметрами при
         * <b>каждом перезапуске приложения</b>. То есть, даже если удалить
         * эту сущность из таблицы, при следующей перезагрузке она снова будет создана
         */
        ON_RELOAD,

        /**
         * Инициализация будет производиться только в том случае, если соответствующая таблица пуста. Если в таблице
         * есть хотя бы одна запись, ничего не произойдет
         */
        ON_TABLE_EMPTY
    }
}
